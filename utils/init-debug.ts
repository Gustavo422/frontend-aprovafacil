/**
 * Inicializa√ß√£o autom√°tica do sistema de debug
 * 
 * Este arquivo configura automaticamente o sistema de debug
 * quando o aplicativo √© carregado.
 */

import { autoInitializeDebug } from './debug-tools';
import apiInterceptor from './api-interceptor';

// Fun√ß√£o para inicializar o sistema de debug no cliente
function initializeDebugSystem() {
  if (typeof window === 'undefined') return;

  // Inicializar o sistema de debug
  autoInitializeDebug();

  // Aguardar o DOM estar pronto
  const initializeWhenReady = () => {
    console.log('üîß Sistema de debug inicializado');
    console.log('üìä Interceptor de API ativo');
    console.log('üí° Use Ctrl+Shift+Z para abrir o painel de debug');
    console.log('üîç Acesse /debug para a p√°gina de debug completa');

    // Adicionar helpers globais para debug
    (window as any).debugHelpers = {
      // Ativar debug para namespaces espec√≠ficos
      enableDebug: (namespaces = 'app:frontend:*') => {
        localStorage.setItem('debug', namespaces);
        console.log(`üîß Debug ativado para: ${namespaces}`);
        console.log('üîÑ Recarregue a p√°gina para aplicar as altera√ß√µes');
      },

      // Desativar debug
      disableDebug: () => {
        localStorage.removeItem('debug');
        console.log('üîß Debug desativado');
        console.log('üîÑ Recarregue a p√°gina para aplicar as altera√ß√µes');
      },

      // Mostrar ajuda
      showHelp: () => {
        console.log(`
üîß === SISTEMA DE DEBUG - AJUDA ===

üìã COMANDOS DISPON√çVEIS:
  debugHelpers.enableDebug('app:frontend:*')     - Ativar debug completo
  debugHelpers.enableDebug('app:frontend:api:*') - Ativar apenas debug de API
  debugHelpers.disableDebug()                    - Desativar debug
  debugHelpers.showHelp()                        - Mostrar esta ajuda

üîç NAMESPACES DISPON√çVEIS:
  - app:frontend:api:*        (requisi√ß√µes de API)
  - app:frontend:component:*  (componentes React)
  - app:frontend:state:*      (gerenciamento de estado)
  - app:frontend:hook:*       (hooks personalizados)
  - app:frontend:error:*      (erros e exce√ß√µes)
  - app:frontend:performance:* (m√©tricas de performance)
  - app:frontend:*            (todos os namespaces)

üéÆ CONTROLES DO PAINEL:
  - Ctrl+Shift+Z              - Alternar painel de debug
  - Clique no bot√£o flutuante - Abrir painel de debug
  - /debug                    - P√°gina completa de debug

üìä INTERCEPTOR DE API:
  apiInterceptor.getCalls()                    - Ver todas as chamadas
  apiInterceptor.getCallsByFilter({hasError: true}) - Ver apenas erros
  apiInterceptor.getStats()                    - Ver estat√≠sticas
  apiInterceptor.exportCalls()                 - Exportar hist√≥rico

üìù LOGGING MANUAL:
  addDebugData({type: 'info', title: 'Teste', data: {}}) - Adicionar log manual
  debug_ComponentName.logInfo('Mensagem', dados)        - Log espec√≠fico do componente

üîÑ RECARREGUE A P√ÅGINA AP√ìS ALTERAR CONFIGURA√á√ïES
        `);
      },

      // Testar conex√£o com backend
      testBackendConnection: async () => {
        console.log('üîç Testando conex√£o com backend...');
        
        try {
          const startTime = performance.now();
          const response = await fetch('/api/health');
          const duration = performance.now() - startTime;
          
          if (response.ok) {
            console.log(`‚úÖ Backend conectado (${duration.toFixed(2)}ms)`);
            const data = await response.json();
            console.log('üìä Dados de health check:', data);
          } else {
            console.log(`‚ùå Backend retornou erro: ${response.status} ${response.statusText}`);
          }
        } catch (error) {
          console.log('‚ùå Erro ao conectar com backend:', error);
        }
      },

      // Verificar status do sistema
      checkSystemStatus: () => {
        const status = {
          debugEnabled: !!localStorage.getItem('debug'),
          debugNamespaces: localStorage.getItem('debug') || 'Nenhum',
          apiInterceptor: !!(window as any).apiInterceptor,
          debugPanel: !!(window as any).addDebugData,
          environment: process.env.NODE_ENV,
          timestamp: new Date().toISOString()
        };

        console.log('üìä Status do sistema de debug:', status);
        return status;
      },

      // Limpar todos os dados de debug
      clearAllDebugData: () => {
        if ((window as any).clearDebugData) {
          (window as any).clearDebugData();
        }
        if ((window as any).apiInterceptor) {
          (window as any).apiInterceptor.clearCalls();
        }
        console.log('üßπ Todos os dados de debug foram limpos');
      },

      // Exportar todos os dados de debug
      exportAllDebugData: () => {
        const data = {
          timestamp: new Date().toISOString(),
          systemStatus: (window as any).debugHelpers?.checkSystemStatus(),
          apiCalls: (window as any).apiInterceptor?.exportCalls(),
          debugData: 'Use o painel de debug para exportar dados espec√≠ficos'
        };

        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `debug-export-${new Date().toISOString().slice(0, 19)}.json`;
        a.click();
        URL.revokeObjectURL(url);
        
        console.log('üìÅ Dados de debug exportados');
      }
    };

    // Expor interceptor de API globalmente
    (window as any).apiInterceptor = {
      getCalls: () => apiInterceptor.getCalls(),
      getCallsByFilter: (filter: any) => apiInterceptor.getCallsByFilter(filter),
      clearCalls: () => apiInterceptor.clearCalls(),
      exportCalls: () => apiInterceptor.exportCalls(),
      setEnabled: (enabled: boolean) => apiInterceptor.setEnabled(enabled),
      setMaxCalls: (max: number) => apiInterceptor.setMaxCalls(max),
      getStats: () => apiInterceptor.getStats()
    };

    // Mostrar mensagem de boas-vindas em desenvolvimento
    if (process.env.NODE_ENV === 'development') {
      console.log(`
üéâ === SISTEMA DE DEBUG ATIVO ===

üîß Para come√ßar a usar:
  debugHelpers.showHelp() - Ver todos os comandos dispon√≠veis
  debugHelpers.testBackendConnection() - Testar conex√£o com backend
  debugHelpers.checkSystemStatus() - Verificar status do sistema

üí° Dica: Use Ctrl+Shift+Z para abrir o painel de debug rapidamente!
      `);
    }
  };

  // Verificar se o DOM j√° est√° pronto
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeWhenReady);
  } else {
    // DOM j√° est√° pronto, inicializar imediatamente
    initializeWhenReady();
  }
}

// Inicializar quando o m√≥dulo for carregado
initializeDebugSystem();

export default {
  apiInterceptor,
  autoInitializeDebug
}; 