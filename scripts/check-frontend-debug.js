#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç Verificando Sistema de Debug do Frontend...\n');

// Verificar arquivos de debug
const debugFiles = [
  'src/lib/debug-interceptor.ts',
  'src/lib/api.tsx',
  'scripts/start-debug.js'
];

console.log('üìÅ Verificando arquivos de debug:');
for (const file of debugFiles) {
  const filePath = path.join(__dirname, '..', file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file} - Existe`);
  } else {
    console.log(`‚ùå ${file} - N√£o encontrado`);
  }
}

// Verificar vari√°veis de ambiente
console.log('\nüåç Verificando vari√°veis de ambiente:');
const envVars = [
  'NODE_ENV',
  'NEXT_PUBLIC_DEBUG',
  'NEXT_PUBLIC_API_URL'
];

for (const envVar of envVars) {
  const value = process.env[envVar];
  if (value) {
    console.log(`‚úÖ ${envVar} = ${value}`);
  } else {
    console.log(`‚ö†Ô∏è ${envVar} = n√£o definida`);
  }
}

// Verificar arquivo .env.local
const envLocalPath = path.join(__dirname, '..', '.env.local');
console.log('\nüìù Verificando arquivo .env.local:');
if (fs.existsSync(envLocalPath)) {
  console.log('‚úÖ .env.local existe');
  const content = fs.readFileSync(envLocalPath, 'utf8');
  const lines = content.split('\n').filter(line => line.trim() && !line.startsWith('#'));
  console.log(`   üìã ${lines.length} vari√°veis definidas`);
  
  for (const line of lines) {
    const [key] = line.split('=');
    console.log(`   ‚Ä¢ ${key}`);
  }
} else {
  console.log('‚ùå .env.local n√£o existe');
  console.log('üí° Execute: npm run test:auth para criar automaticamente');
}

// Verificar configura√ß√£o do Next.js
const nextConfigPath = path.join(__dirname, '..', 'next.config.js');
console.log('\n‚öôÔ∏è Verificando configura√ß√£o do Next.js:');
if (fs.existsSync(nextConfigPath)) {
  console.log('‚úÖ next.config.js existe');
  const content = fs.readFileSync(nextConfigPath, 'utf8');
  if (content.includes('NEXT_PUBLIC_DEBUG')) {
    console.log('‚úÖ Configura√ß√£o de debug encontrada');
  } else {
    console.log('‚ö†Ô∏è Configura√ß√£o de debug n√£o encontrada');
  }
} else {
  console.log('‚ùå next.config.js n√£o existe');
}

// Verificar se o interceptor est√° sendo importado
const apiPath = path.join(__dirname, '..', 'src/lib/api.tsx');
console.log('\nüîß Verificando importa√ß√£o do interceptor:');
if (fs.existsSync(apiPath)) {
  const content = fs.readFileSync(apiPath, 'utf8');
  if (content.includes('setupDebugInterceptors')) {
    console.log('‚úÖ Interceptor de debug est√° sendo importado');
  } else {
    console.log('‚ùå Interceptor de debug n√£o est√° sendo importado');
  }
} else {
  console.log('‚ùå Arquivo api.tsx n√£o encontrado');
}

// Instru√ß√µes
console.log('\nüìã Instru√ß√µes para ativar debug:');
console.log('1. Execute: npm run dev:debug');
console.log('2. Abra: http://localhost:3000?debug=true');
console.log('3. Pressione F12 para abrir o console');
console.log('4. Procure por logs com prefixo [DEBUG]');
console.log('5. Se n√£o aparecer logs, verifique:');
console.log('   ‚Ä¢ Se NEXT_PUBLIC_DEBUG=true est√° definido');
console.log('   ‚Ä¢ Se o interceptor est√° sendo carregado');
console.log('   ‚Ä¢ Se h√° erros no console do navegador');

// Verificar se h√° erros comuns
console.log('\nüîç Verificando problemas comuns:');
const commonIssues = [
  {
    name: 'Interceptor n√£o carregado',
    check: () => {
      const apiContent = fs.readFileSync(apiPath, 'utf8');
      return apiContent.includes('setupDebugInterceptors') && 
             apiContent.includes('NEXT_PUBLIC_DEBUG');
    }
  },
  {
    name: 'Vari√°veis de ambiente n√£o definidas',
    check: () => {
      return process.env.NEXT_PUBLIC_DEBUG === 'true';
    }
  },
  {
    name: 'Arquivo .env.local n√£o existe',
    check: () => {
      return fs.existsSync(envLocalPath);
    }
  }
];

for (const issue of commonIssues) {
  if (issue.check()) {
    console.log(`‚úÖ ${issue.name} - OK`);
  } else {
    console.log(`‚ùå ${issue.name} - Problema detectado`);
  }
}

console.log('\nüéØ Resumo:');
console.log('‚Ä¢ Se todos os arquivos existem e as vari√°veis est√£o definidas,');
console.log('  o sistema de debug deve funcionar corretamente.');
console.log('‚Ä¢ Execute os testes para verificar se os endpoints est√£o funcionando.');
console.log('‚Ä¢ Verifique os logs do backend para erros de banco de dados.'); 